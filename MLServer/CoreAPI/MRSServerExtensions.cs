// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MMLServer
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MRSServer.
    /// </summary>
    public static partial class MRSServerExtensions
    {
            /// <summary>
            /// Login User
            /// </summary>
            /// <remarks>
            /// Logs the user in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// Login properties for athentication.
            /// </param>
            public static AccessTokenResponse Login(this IMRSServer operations, LoginRequest loginRequest)
            {
                return operations.LoginAsync(loginRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Login User
            /// </summary>
            /// <remarks>
            /// Logs the user in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='loginRequest'>
            /// Login properties for athentication.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessTokenResponse> LoginAsync(this IMRSServer operations, LoginRequest loginRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(loginRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Refresh User Access Token
            /// </summary>
            /// <remarks>
            /// The user renews access token and refresh token.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='renewTokenRequest'>
            /// Renew access token properties for athentication.
            /// </param>
            public static AccessTokenResponse RenewToken(this IMRSServer operations, RenewTokenRequest renewTokenRequest)
            {
                return operations.RenewTokenAsync(renewTokenRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Refresh User Access Token
            /// </summary>
            /// <remarks>
            /// The user renews access token and refresh token.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='renewTokenRequest'>
            /// Renew access token properties for athentication.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessTokenResponse> RenewTokenAsync(this IMRSServer operations, RenewTokenRequest renewTokenRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenewTokenWithHttpMessagesAsync(renewTokenRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete User Access Token
            /// </summary>
            /// <remarks>
            /// The user revokes a refresh token.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='refreshToken'>
            /// The refresh token to be revoked.
            /// </param>
            public static AccessTokenResponse RevokeRefreshToken(this IMRSServer operations, string refreshToken)
            {
                return operations.RevokeRefreshTokenAsync(refreshToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete User Access Token
            /// </summary>
            /// <remarks>
            /// The user revokes a refresh token.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='refreshToken'>
            /// The refresh token to be revoked.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessTokenResponse> RevokeRefreshTokenAsync(this IMRSServer operations, string refreshToken, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeRefreshTokenWithHttpMessagesAsync(refreshToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Services
            /// </summary>
            /// <remarks>
            /// Lists all the published services.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<WebService> GetAllWebServices(this IMRSServer operations)
            {
                return operations.GetAllWebServicesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Services
            /// </summary>
            /// <remarks>
            /// Lists all the published services.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WebService>> GetAllWebServicesAsync(this IMRSServer operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWebServicesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Service by `name`
            /// </summary>
            /// <remarks>
            /// Publish the web services for the logged in user with given name and a
            /// unique version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the published web service.
            /// </param>
            /// <param name='publishRequest'>
            /// Publish Web Service request details.
            /// </param>
            public static string PublishWebService(this IMRSServer operations, string name, PublishWebServiceRequest publishRequest)
            {
                return operations.PublishWebServiceAsync(name, publishRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Service by `name`
            /// </summary>
            /// <remarks>
            /// Publish the web services for the logged in user with given name and a
            /// unique version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the published web service.
            /// </param>
            /// <param name='publishRequest'>
            /// Publish Web Service request details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PublishWebServiceAsync(this IMRSServer operations, string name, PublishWebServiceRequest publishRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PublishWebServiceWithHttpMessagesAsync(name, publishRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Service by `name`
            /// </summary>
            /// <remarks>
            /// Lists all the published services with the provided `name`.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the published web service.
            /// </param>
            public static IList<WebService> GetAllWebServiceVersionsByName(this IMRSServer operations, string name)
            {
                return operations.GetAllWebServiceVersionsByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Service by `name`
            /// </summary>
            /// <remarks>
            /// Lists all the published services with the provided `name`.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the published web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WebService>> GetAllWebServiceVersionsByNameAsync(this IMRSServer operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWebServiceVersionsByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create realtime web service by `name`
            /// </summary>
            /// <remarks>
            /// Publish the realtime web services for the logged in user with given name
            /// and a unique version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the realtime web service to be published.
            /// </param>
            /// <param name='model'>
            /// The binary serialized model to be used for realtime web service.
            /// </param>
            /// <param name='description'>
            /// The description of the realtime web service to be published.
            /// </param>
            /// <param name='operationId'>
            /// Swagger operationId/alias for the realtime web service to be published.
            /// </param>
            public static string PublishRealtimeWebServiceByName(this IMRSServer operations, string name, Stream model, string description = default(string), string operationId = default(string))
            {
                return operations.PublishRealtimeWebServiceByNameAsync(name, model, description, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create realtime web service by `name`
            /// </summary>
            /// <remarks>
            /// Publish the realtime web services for the logged in user with given name
            /// and a unique version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the realtime web service to be published.
            /// </param>
            /// <param name='model'>
            /// The binary serialized model to be used for realtime web service.
            /// </param>
            /// <param name='description'>
            /// The description of the realtime web service to be published.
            /// </param>
            /// <param name='operationId'>
            /// Swagger operationId/alias for the realtime web service to be published.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PublishRealtimeWebServiceByNameAsync(this IMRSServer operations, string name, Stream model, string description = default(string), string operationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PublishRealtimeWebServiceByNameWithHttpMessagesAsync(name, model, description, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Service by `name` and `version`
            /// </summary>
            /// <remarks>
            /// Publish the web service for the logged in user with given name and version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the published web service.
            /// </param>
            /// <param name='version'>
            /// version of the published web service.
            /// </param>
            /// <param name='publishRequest'>
            /// Publish Service request details.
            /// </param>
            public static string PublishWebServiceVersion(this IMRSServer operations, string name, string version, PublishWebServiceRequest publishRequest)
            {
                return operations.PublishWebServiceVersionAsync(name, version, publishRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Service by `name` and `version`
            /// </summary>
            /// <remarks>
            /// Publish the web service for the logged in user with given name and version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// name of the published web service.
            /// </param>
            /// <param name='version'>
            /// version of the published web service.
            /// </param>
            /// <param name='publishRequest'>
            /// Publish Service request details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PublishWebServiceVersionAsync(this IMRSServer operations, string name, string version, PublishWebServiceRequest publishRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PublishWebServiceVersionWithHttpMessagesAsync(name, version, publishRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch Service
            /// </summary>
            /// <remarks>
            /// Updates the published service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the published web service.
            /// </param>
            /// <param name='version'>
            /// The version of the published web service.
            /// </param>
            /// <param name='patchRequest'>
            /// Publish Web Service request details.
            /// </param>
            public static string PatchWebServiceVersion(this IMRSServer operations, string name, string version, PublishWebServiceRequest patchRequest)
            {
                return operations.PatchWebServiceVersionAsync(name, version, patchRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch Service
            /// </summary>
            /// <remarks>
            /// Updates the published service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the published web service.
            /// </param>
            /// <param name='version'>
            /// The version of the published web service.
            /// </param>
            /// <param name='patchRequest'>
            /// Publish Web Service request details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PatchWebServiceVersionAsync(this IMRSServer operations, string name, string version, PublishWebServiceRequest patchRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWebServiceVersionWithHttpMessagesAsync(name, version, patchRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Service by `name` and `version`
            /// </summary>
            /// <remarks>
            /// Lists all the published services with the provided `name` and `version`.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the published web service.
            /// </param>
            /// <param name='version'>
            /// The version of the published web service.
            /// </param>
            public static IList<WebService> GetWebServiceVersion(this IMRSServer operations, string name, string version)
            {
                return operations.GetWebServiceVersionAsync(name, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Service by `name` and `version`
            /// </summary>
            /// <remarks>
            /// Lists all the published services with the provided `name` and `version`.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the published web service.
            /// </param>
            /// <param name='version'>
            /// The version of the published web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WebService>> GetWebServiceVersionAsync(this IMRSServer operations, string name, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServiceVersionWithHttpMessagesAsync(name, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Service
            /// </summary>
            /// <remarks>
            /// Deletes the published web service for the logged in user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the published web service.
            /// </param>
            /// <param name='version'>
            /// The version of the published web service.
            /// </param>
            public static void DeleteWebServiceVersion(this IMRSServer operations, string name, string version)
            {
                operations.DeleteWebServiceVersionAsync(name, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Service
            /// </summary>
            /// <remarks>
            /// Deletes the published web service for the logged in user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the published web service.
            /// </param>
            /// <param name='version'>
            /// The version of the published web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteWebServiceVersionAsync(this IMRSServer operations, string name, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWebServiceVersionWithHttpMessagesAsync(name, version, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create realtime web service by `name` and `version`.
            /// </summary>
            /// <remarks>
            /// Publish the realtime web services for the logged in user with given name
            /// and given version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the realtime web service to be published.
            /// </param>
            /// <param name='version'>
            /// The version of the realtime web service to be published.
            /// </param>
            /// <param name='model'>
            /// The binary serialized model to be used for realtime web service.
            /// </param>
            /// <param name='description'>
            /// The description of the realtime web service to be published.
            /// </param>
            /// <param name='operationId'>
            /// Swagger operationId/alias for the realtime web service to be published.
            /// </param>
            public static string PublishRealtimeWebServiceByNameVersion(this IMRSServer operations, string name, string version, Stream model, string description = default(string), string operationId = default(string))
            {
                return operations.PublishRealtimeWebServiceByNameVersionAsync(name, version, model, description, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create realtime web service by `name` and `version`.
            /// </summary>
            /// <remarks>
            /// Publish the realtime web services for the logged in user with given name
            /// and given version.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the realtime web service to be published.
            /// </param>
            /// <param name='version'>
            /// The version of the realtime web service to be published.
            /// </param>
            /// <param name='model'>
            /// The binary serialized model to be used for realtime web service.
            /// </param>
            /// <param name='description'>
            /// The description of the realtime web service to be published.
            /// </param>
            /// <param name='operationId'>
            /// Swagger operationId/alias for the realtime web service to be published.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PublishRealtimeWebServiceByNameVersionAsync(this IMRSServer operations, string name, string version, Stream model, string description = default(string), string operationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PublishRealtimeWebServiceByNameVersionWithHttpMessagesAsync(name, version, model, description, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch realtime web service
            /// </summary>
            /// <remarks>
            /// Updates the published realtime web service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the published realtime web service
            /// </param>
            /// <param name='version'>
            /// Version of the published realtime web service
            /// </param>
            /// <param name='description'>
            /// The description of the realtime web service to be published.
            /// </param>
            /// <param name='operationId'>
            /// Swagger operationId/alias for the realtime web service to be published.
            /// </param>
            /// <param name='model'>
            /// The binary serialized model to be used for realtime web service.
            /// </param>
            public static string PatchRealtimeWebServiceByNameVersion(this IMRSServer operations, string name, string version, string description = default(string), string operationId = default(string), Stream model = default(Stream))
            {
                return operations.PatchRealtimeWebServiceByNameVersionAsync(name, version, description, operationId, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch realtime web service
            /// </summary>
            /// <remarks>
            /// Updates the published realtime web service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the published realtime web service
            /// </param>
            /// <param name='version'>
            /// Version of the published realtime web service
            /// </param>
            /// <param name='description'>
            /// The description of the realtime web service to be published.
            /// </param>
            /// <param name='operationId'>
            /// Swagger operationId/alias for the realtime web service to be published.
            /// </param>
            /// <param name='model'>
            /// The binary serialized model to be used for realtime web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PatchRealtimeWebServiceByNameVersionAsync(this IMRSServer operations, string name, string version, string description = default(string), string operationId = default(string), Stream model = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchRealtimeWebServiceByNameVersionWithHttpMessagesAsync(name, version, description, operationId, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get API Swagger
            /// </summary>
            /// <remarks>
            /// Returns a _Swagger_ `swagger.json` describing a published web service's API
            /// capabilities.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the published web service.
            /// </param>
            /// <param name='version'>
            /// The version of the published web service.
            /// </param>
            public static IDictionary<string, object> GetWebServiceSwagger(this IMRSServer operations, string name, string version)
            {
                return operations.GetWebServiceSwaggerAsync(name, version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get API Swagger
            /// </summary>
            /// <remarks>
            /// Returns a _Swagger_ `swagger.json` describing a published web service's API
            /// capabilities.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// The name of the published web service.
            /// </param>
            /// <param name='version'>
            /// The version of the published web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> GetWebServiceSwaggerAsync(this IMRSServer operations, string name, string version, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWebServiceSwaggerWithHttpMessagesAsync(name, version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Session
            /// </summary>
            /// <remarks>
            /// Create a new session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createSessionRequest'>
            /// Properties of the new session.
            /// </param>
            public static CreateSessionResponse CreateSession(this IMRSServer operations, CreateSessionRequest createSessionRequest)
            {
                return operations.CreateSessionAsync(createSessionRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Session
            /// </summary>
            /// <remarks>
            /// Create a new session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='createSessionRequest'>
            /// Properties of the new session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateSessionResponse> CreateSessionAsync(this IMRSServer operations, CreateSessionRequest createSessionRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSessionWithHttpMessagesAsync(createSessionRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Sessions
            /// </summary>
            /// <remarks>
            /// Lists all existing sessions for the current user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Session> ListSessions(this IMRSServer operations)
            {
                return operations.ListSessionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Sessions
            /// </summary>
            /// <remarks>
            /// Lists all existing sessions for the current user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Session>> ListSessionsAsync(this IMRSServer operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSessionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Code
            /// </summary>
            /// <remarks>
            /// Executes code in the context of a specific session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='executeRequest'>
            /// code that needs to be executed
            /// </param>
            public static ExecuteResponse ExecuteCode(this IMRSServer operations, string id, ExecuteRequest executeRequest)
            {
                return operations.ExecuteCodeAsync(id, executeRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Code
            /// </summary>
            /// <remarks>
            /// Executes code in the context of a specific session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='executeRequest'>
            /// code that needs to be executed
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExecuteResponse> ExecuteCodeAsync(this IMRSServer operations, string id, ExecuteRequest executeRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteCodeWithHttpMessagesAsync(id, executeRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Session
            /// </summary>
            /// <remarks>
            /// Close a session and releases all it's associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session to delete.
            /// </param>
            public static string CloseSession(this IMRSServer operations, string id)
            {
                return operations.CloseSessionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Session
            /// </summary>
            /// <remarks>
            /// Close a session and releases all it's associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CloseSessionAsync(this IMRSServer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloseSessionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Session by `force`
            /// </summary>
            /// <remarks>
            /// Attempt to _kill_ a session and releases all it's associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session to delete.
            /// </param>
            public static string CloseSessionByForce(this IMRSServer operations, string id)
            {
                return operations.CloseSessionByForceAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Session by `force`
            /// </summary>
            /// <remarks>
            /// Attempt to _kill_ a session and releases all it's associated resources.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CloseSessionByForceAsync(this IMRSServer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CloseSessionByForceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Console Output
            /// </summary>
            /// <remarks>
            /// Returns the console output for the current or last execution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            public static ConsoleOutputResponse GetSessionConsoleOutput(this IMRSServer operations, string id)
            {
                return operations.GetSessionConsoleOutputAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Console Output
            /// </summary>
            /// <remarks>
            /// Returns the console output for the current or last execution.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConsoleOutputResponse> GetSessionConsoleOutputAsync(this IMRSServer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSessionConsoleOutputWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get History
            /// </summary>
            /// <remarks>
            /// Lists all history for a specific session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            public static IList<string> ListSessionHistory(this IMRSServer operations, string id)
            {
                return operations.ListSessionHistoryAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get History
            /// </summary>
            /// <remarks>
            /// Lists all history for a specific session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ListSessionHistoryAsync(this IMRSServer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSessionHistoryWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Load File
            /// </summary>
            /// <remarks>
            /// Loads a file into the session working directory. The uploaded file name is
            /// extracted from the file and if another file with the same name already
            /// exists in the working directory, the file will be overwritten.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='file'>
            /// The file to be uploaded to the workspace.
            /// </param>
            public static void UploadSessionFile(this IMRSServer operations, string id, Stream file)
            {
                operations.UploadSessionFileAsync(id, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Load File
            /// </summary>
            /// <remarks>
            /// Loads a file into the session working directory. The uploaded file name is
            /// extracted from the file and if another file with the same name already
            /// exists in the working directory, the file will be overwritten.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='file'>
            /// The file to be uploaded to the workspace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UploadSessionFileAsync(this IMRSServer operations, string id, Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UploadSessionFileWithHttpMessagesAsync(id, file, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Files
            /// </summary>
            /// <remarks>
            /// Lists all files of a specific session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            public static IList<string> ListSessionFiles(this IMRSServer operations, string id)
            {
                return operations.ListSessionFilesAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Files
            /// </summary>
            /// <remarks>
            /// Lists all files of a specific session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ListSessionFilesAsync(this IMRSServer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSessionFilesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get File
            /// </summary>
            /// <remarks>
            /// Downloads a file from a session as a stream.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='fileName'>
            /// Name of the file.
            /// </param>
            public static Stream GetSessionFile(this IMRSServer operations, string id, string fileName)
            {
                return operations.GetSessionFileAsync(id, fileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get File
            /// </summary>
            /// <remarks>
            /// Downloads a file from a session as a stream.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='fileName'>
            /// Name of the file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetSessionFileAsync(this IMRSServer operations, string id, string fileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetSessionFileWithHttpMessagesAsync(id, fileName, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Delete File
            /// </summary>
            /// <remarks>
            /// Delete a file from a session's working directory.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='fileName'>
            /// Name of the file.
            /// </param>
            public static void DeleteSessionFile(this IMRSServer operations, string id, string fileName)
            {
                operations.DeleteSessionFileAsync(id, fileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete File
            /// </summary>
            /// <remarks>
            /// Delete a file from a session's working directory.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='fileName'>
            /// Name of the file.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSessionFileAsync(this IMRSServer operations, string id, string fileName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteSessionFileWithHttpMessagesAsync(id, fileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Workspace Object Names
            /// </summary>
            /// <remarks>
            /// Lists all object names of a specific session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            public static IList<string> ListWorkspaceObjects(this IMRSServer operations, string id)
            {
                return operations.ListWorkspaceObjectsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Workspace Object Names
            /// </summary>
            /// <remarks>
            /// Lists all object names of a specific session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ListWorkspaceObjectsAsync(this IMRSServer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkspaceObjectsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Workspace Object
            /// </summary>
            /// <remarks>
            /// Upload a serialized object into the session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='objectName'>
            /// Name of the object.
            /// </param>
            /// <param name='serializedObject'>
            /// The binary file that contains a serialized object to be uploaded. The
            /// binary file `Content-Type` should be `application/octet-stream`.
            /// </param>
            public static void SetWorkspaceObject(this IMRSServer operations, string id, string objectName, string serializedObject)
            {
                operations.SetWorkspaceObjectAsync(id, objectName, serializedObject).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Workspace Object
            /// </summary>
            /// <remarks>
            /// Upload a serialized object into the session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='objectName'>
            /// Name of the object.
            /// </param>
            /// <param name='serializedObject'>
            /// The binary file that contains a serialized object to be uploaded. The
            /// binary file `Content-Type` should be `application/octet-stream`.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetWorkspaceObjectAsync(this IMRSServer operations, string id, string objectName, string serializedObject, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetWorkspaceObjectWithHttpMessagesAsync(id, objectName, serializedObject, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Workspace Object
            /// </summary>
            /// <remarks>
            /// Returns an object from a session. For the `R` runtime, the object is
            /// serialized as a `.RData` file stream. For the `Python` runtime, the object
            /// is serialized as a `.dill` file stream.
            ///
            /// **Important** Python objects are not guaranteed to be compatible with
            /// versions other than Python `3.5`.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='objectName'>
            /// Name of the R object.
            /// </param>
            public static Stream GetWorkspaceObject(this IMRSServer operations, string id, string objectName)
            {
                return operations.GetWorkspaceObjectAsync(id, objectName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Workspace Object
            /// </summary>
            /// <remarks>
            /// Returns an object from a session. For the `R` runtime, the object is
            /// serialized as a `.RData` file stream. For the `Python` runtime, the object
            /// is serialized as a `.dill` file stream.
            ///
            /// **Important** Python objects are not guaranteed to be compatible with
            /// versions other than Python `3.5`.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='objectName'>
            /// Name of the R object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetWorkspaceObjectAsync(this IMRSServer operations, string id, string objectName, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetWorkspaceObjectWithHttpMessagesAsync(id, objectName, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Delete Workspace Object
            /// </summary>
            /// <remarks>
            /// Delete an object from a session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='objectName'>
            /// Name of the object.
            /// </param>
            public static void DeleteWorkspaceObject(this IMRSServer operations, string id, string objectName)
            {
                operations.DeleteWorkspaceObjectAsync(id, objectName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Workspace Object
            /// </summary>
            /// <remarks>
            /// Delete an object from a session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='objectName'>
            /// Name of the object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteWorkspaceObjectAsync(this IMRSServer operations, string id, string objectName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWorkspaceObjectWithHttpMessagesAsync(id, objectName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create Snapshot
            /// </summary>
            /// <remarks>
            /// Create a snapshot from session by saving the workspace and all files in the
            /// working directory into zip file, the return value will be the created
            /// snapshot Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='createSnapshotRequest'>
            /// Properties of the new snapshot.
            /// </param>
            public static CreateSnapshotResponse CreateSnapshot(this IMRSServer operations, string id, CreateSnapshotRequest createSnapshotRequest)
            {
                return operations.CreateSnapshotAsync(id, createSnapshotRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Snapshot
            /// </summary>
            /// <remarks>
            /// Create a snapshot from session by saving the workspace and all files in the
            /// working directory into zip file, the return value will be the created
            /// snapshot Id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='createSnapshotRequest'>
            /// Properties of the new snapshot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateSnapshotResponse> CreateSnapshotAsync(this IMRSServer operations, string id, CreateSnapshotRequest createSnapshotRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSnapshotWithHttpMessagesAsync(id, createSnapshotRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Load Snapshot
            /// </summary>
            /// <remarks>
            /// Loads a snapshot into session by merging the workspace of the saved
            /// snapshot and target session. It will override the files in the working
            /// directory as well.
            ///
            /// **Note - ** You can only load R snapshots to R session and Python snapshots
            /// to a Python session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='snapshotId'>
            /// Id of the saved snapshot.
            /// </param>
            public static void LoadSnapshot(this IMRSServer operations, string id, string snapshotId)
            {
                operations.LoadSnapshotAsync(id, snapshotId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Load Snapshot
            /// </summary>
            /// <remarks>
            /// Loads a snapshot into session by merging the workspace of the saved
            /// snapshot and target session. It will override the files in the working
            /// directory as well.
            ///
            /// **Note - ** You can only load R snapshots to R session and Python snapshots
            /// to a Python session.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session.
            /// </param>
            /// <param name='snapshotId'>
            /// Id of the saved snapshot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LoadSnapshotAsync(this IMRSServer operations, string id, string snapshotId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LoadSnapshotWithHttpMessagesAsync(id, snapshotId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancel Session
            /// </summary>
            /// <remarks>
            /// Cancel a session by aborting the current execution operation, afterwards
            /// the session will be alive and ready to accept any calls. Cancel session is
            /// **not** guaranteed to interrupt the execution
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session to cancel.
            /// </param>
            public static string CancelSession(this IMRSServer operations, string id)
            {
                return operations.CancelSessionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel Session
            /// </summary>
            /// <remarks>
            /// Cancel a session by aborting the current execution operation, afterwards
            /// the session will be alive and ready to accept any calls. Cancel session is
            /// **not** guaranteed to interrupt the execution
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the session to cancel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CancelSessionAsync(this IMRSServer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelSessionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Snapshots
            /// </summary>
            /// <remarks>
            /// List all the snapshots for the current user and display some info such as
            /// Id, display name, creation time, zip file size and owner for this snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Snapshot> ListSnapshots(this IMRSServer operations)
            {
                return operations.ListSnapshotsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Snapshots
            /// </summary>
            /// <remarks>
            /// List all the snapshots for the current user and display some info such as
            /// Id, display name, creation time, zip file size and owner for this snapshot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Snapshot>> ListSnapshotsAsync(this IMRSServer operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Snapshot
            /// </summary>
            /// <remarks>
            /// Get the snapshot content as zip file stream (zip file containing the
            /// working directory files and the workspace file)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the snapshot.
            /// </param>
            public static Stream GetSnapshotContent(this IMRSServer operations, string id)
            {
                return operations.GetSnapshotContentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Snapshot
            /// </summary>
            /// <remarks>
            /// Get the snapshot content as zip file stream (zip file containing the
            /// working directory files and the workspace file)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the snapshot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetSnapshotContentAsync(this IMRSServer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetSnapshotContentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Delete Snapshot
            /// </summary>
            /// <remarks>
            /// Delete a snapshot permanently and also it's content (zip file containing
            /// the working directory files and the workspace file)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the snapshot.
            /// </param>
            public static string DeleteSnapshot(this IMRSServer operations, string id)
            {
                return operations.DeleteSnapshotAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Snapshot
            /// </summary>
            /// <remarks>
            /// Delete a snapshot permanently and also it's content (zip file containing
            /// the working directory files and the workspace file)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the snapshot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> DeleteSnapshotAsync(this IMRSServer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSnapshotWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Status
            /// </summary>
            /// <remarks>
            /// Gets the current health of the system.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static StatusResponse Status(this IMRSServer operations)
            {
                return operations.StatusAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Status
            /// </summary>
            /// <remarks>
            /// Gets the current health of the system.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponse> StatusAsync(this IMRSServer operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
